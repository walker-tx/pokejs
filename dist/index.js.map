{"version":3,"sources":["../src/endpoint-groups/pokemon/pokemon.ts","../src/constants.ts","../src/errors.ts","../src/endpoint-groups/games/generation.ts","../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { BASE_API_URL } from \"../../constants.js\";\nimport { PokeJsClientError, PokeJsHttpError } from \"../../errors.js\";\nimport type { NamedAPIResourceList, Pokemon } from \"../../types/poke-api.js\";\nimport type {\n  PaginatedResult,\n  PaginationInput,\n  Result,\n} from \"../../types/utility.js\";\n\n/**\n * Fetches a Pokémon by its name or ID from the Pokémon API. Intended only for\n * internal use by the SDK.\n *\n * @param {string} nameOrId - The name or ID of the Pokémon to fetch.\n *\n * @returns {Promise<Result<Pokemon, PokeJsHttpError>>} A promise that resolves\n * to a Result containing either the fetched Pokémon data or an error.\n */\nasync function _fetchPokemon(\n  nameOrId: string | number,\n): Promise<Result<Pokemon, PokeJsHttpError>> {\n  const response = await fetch(`${BASE_API_URL}/pokemon/${nameOrId}`);\n\n  if (response.ok) return { ok: true, data: await response.json() };\n\n  return { ok: false, error: await PokeJsHttpError.fromResponse(response) };\n}\n\n/**\n * Fetches a Pokémon by its name.\n *\n * @param {string} name - The name of the Pokémon to fetch.\n *\n * @returns {Promise<Result<Pokemon, PokeJsClientError | PokeJsHttpError>>} A\n * promise that resolves to a Result containing either the fetched Pokémon data\n * or an error.\n *\n * @example\n * ```ts\n * const result = await getPokemonByName(\"pikachu\");\n *\n * if (!result.ok) {\n *   console.error(`Failed to fetch Pokémon: ${result.error.message}`);\n * } else {\n *   console.log(`Fetched Pokémon: ${result.data.name}`);\n * }\n * ```\n * @see https://pokeapi.co/docs/v2#pokemon\n */\nexport async function getPokemonByName(\n  name: string,\n): Promise<Result<Pokemon, PokeJsClientError | PokeJsHttpError>> {\n  if (name === \"\") {\n    return {\n      ok: false,\n      error: new PokeJsClientError(\"The name of the Pokémon cannot be empty.\"),\n    };\n  }\n\n  return _fetchPokemon(name);\n}\n\n/**\n * Retrieves a Pokémon by its ID.\n *\n * @param id - The unique identifier of the Pokémon.\n *\n * @returns {Promise<Result<Pokemon, PokeJsHttpError>>} A promise that resolves\n * to a Result containing either the fetched Pokémon data or an error.\n *\n * @example\n * ```ts\n * const result = await getPokemonById(25);\n *\n * if (!result.ok) {\n *   console.error(`Failed to fetch Pokémon: ${result.error.message}`);\n * } else {\n *   console.log(`Fetched Pokémon: ${result.data.name}`);\n * }\n * ```\n * @see https://pokeapi.co/docs/v2#pokemon\n */\nexport async function getPokemonById(\n  id: number,\n): Promise<Result<Pokemon, PokeJsHttpError>> {\n  return _fetchPokemon(id);\n}\n\n/**\n * Fetches a list of Pokémon from the API.\n *\n * @param paginationInput - An object containing pagination parameters.\n * @param paginationInput.limit - The number of items to fetch. Defaults to 20.\n * @param paginationInput.offset - The offset from the start of the list. Defaults to 0.\n *\n * @returns {Promise<PaginatedResult<NamedAPIResourceList, PokeJsHttpError |\n * PokeJsClientError>>} A promise that resolves to a PaginatedResult containing\n * the list of Pokémon resources if the request is successful, or an error if it\n * fails.\n *\n * @example\n * ### Base Usage\n * ```ts\n * const result = await listPokemon();\n *\n * if (!result.ok) {\n *  console.error(`Failed to fetch Pokémon: ${result.error.message}`);\n * } else {\n *  console.log(`Fetched ${result.data.results.length} Pokémon`);\n * }\n * ```\n *\n * @example\n * ### Pagination\n * ```ts\n * const result = await listPokemon({ limit: 10, offset: 0 });\n *\n * if (!result.ok) {\n *   console.error(`Failed to fetch Pokémon: ${result.error.message}`);\n * } else {\n *   console.log(`Fetched ${result.data.results.length} Pokémon`);\n *   if (result.next) {\n *     const nextResult = await result.next();\n *     if (!nextResult.ok) {\n *       console.error(`Failed to fetch next page of Pokémon: ${nextResult.error.message}`);\n *     } else {\n *       console.log(`Fetched next ${nextResult.data.results.length} Pokémon`);\n *     }\n *   }\n * }\n * ```\n *\n * @see https://pokeapi.co/docs/v2#pokemon\n * @see https://pokeapi.co/docs/v2#named\n */\nexport async function listPokemon(\n  paginationInput: PaginationInput = { limit: 20, offset: 0 },\n): Promise<\n  PaginatedResult<NamedAPIResourceList, PokeJsHttpError | PokeJsClientError>\n> {\n  const { limit, offset } = paginationInput;\n\n  if (limit < 1) {\n    return {\n      ok: false,\n      error: new PokeJsClientError(\"The limit must be at least 1\"),\n    };\n  }\n\n  if (offset < 0) {\n    return {\n      ok: false,\n      error: new PokeJsClientError(\"The offset must be at least 0\"),\n    };\n  }\n\n  const url = new URL(`${BASE_API_URL}/pokemon`);\n\n  if (limit) url.searchParams.append(\"limit\", limit.toString());\n  if (offset) url.searchParams.append(\"offset\", offset.toString());\n\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const data: NamedAPIResourceList = await response.json();\n\n    return {\n      ok: true,\n      data,\n      next: data.next\n        ? () => listPokemon({ limit, offset: offset + limit })\n        : undefined,\n      previous: data.previous\n        ? () => listPokemon({ limit, offset: offset - limit })\n        : undefined,\n    };\n  }\n\n  return { ok: false, error: await PokeJsHttpError.fromResponse(response) };\n}\n","export const BASE_API_URL = \"https://pokeapi.co/api/v2\" as const;\n","/**\n * Represents an HTTP error specific to the PokeAPI SDK.\n *\n * @extends Error\n *\n * @remarks\n * This error is thrown when an HTTP request to the PokeAPI fails.\n * It includes the HTTP status code and the error message from the response.\n */\nexport class PokeJsHttpError extends Error {\n  constructor(\n    public status: number,\n    public override message: string,\n  ) {\n    super(message);\n    this.name = \"PokeApiSdkError\";\n  }\n\n  /**\n   * Creates a `PokeHttpError` instance from a given HTTP response.\n   *\n   * @param response - The HTTP response object.\n   * @returns A promise that resolves to a `PokeHttpError` instance.\n   */\n  static async fromResponse(response: Response): Promise<PokeJsHttpError> {\n    return new PokeJsHttpError(response.status, await response.text());\n  }\n}\n\n/**\n * Represents an error specific to the PokeClient or its usage.\n *\n * @extends {Error}\n *\n * @param {string} message - The error message.\n *\n * @remarks\n * This error is thrown when an error occurs in the PokeClient or its usage,\n * such as an invalid parameter.\n */\nexport class PokeJsClientError extends Error {\n  constructor(public override message: string) {\n    super(message);\n  }\n}\n","import type { Generation, NamedAPIResourceList } from \"../../types/poke-api.js\";\nimport { PokeJsClientError, PokeJsHttpError } from \"../../errors.js\";\nimport { BASE_API_URL } from \"../../constants.js\";\nimport type {\n  PaginatedResult,\n  PaginationInput,\n  Result,\n} from \"../../types/utility.js\";\n\n/**\n * Fetches a Pokémon generation by its name or ID. Intended only for internal\n * use by the SDK.\n *\n * @param {string | number} nameOrId - The name or ID of the Pokémon generation\n * to fetch.\n *\n * @returns {Promise<Result<Generation, PokeJsHttpError>>} A promise that\n * resolves to an object containing either the generation data or an error.\n *\n * @see https://pokeapi.co/docs/v2#generation\n */\nasync function _fetchGeneration(\n  nameOrId: string | number,\n): Promise<Result<Generation, PokeJsHttpError>> {\n  const response = await fetch(`${BASE_API_URL}/generation/${nameOrId}`);\n  if (response.ok) return { ok: true, data: await response.json() };\n  return { ok: false, error: await PokeJsHttpError.fromResponse(response) };\n}\n\n/**\n * Retrieves a Pokémon generation by its name.\n *\n * @param name - The name of the generation to retrieve.\n *\n * @returns {Promise<Result<Generation, PokeJsClientError | PokeJsHttpError>>} A\n * promise that resolves to an object containing either the generation data or an error.\n *\n * @example\n * ```ts\n * const result = await getGenerationByName(\"generation-i\");\n *\n * if (!result.ok) {\n *  console.error(`Failed to fetch generation: ${result.error.message}`);\n * } else {\n *  console.log(`Fetched generation: ${result.data.name}`);\n * }\n * ```\n */\nexport async function getGenerationByName(\n  name: string,\n): Promise<Result<Generation, PokeJsClientError | PokeJsHttpError>> {\n  if (name === \"\") {\n    return {\n      ok: false,\n      error: new PokeJsClientError(\n        \"The name of the generation cannot be empty.\",\n      ),\n    };\n  }\n\n  return _fetchGeneration(name);\n}\n\n/**\n * Retrieves a Pokémon generation by its ID.\n *\n * @param id - The ID of the generation to fetch.\n *\n * @returns {Promise<Result<Generation, PokeJsHttpError>>} A promise that\n * resolves to an object containing either the generation data or an error.\n *\n * @example\n * ```ts\n * const result = await getGenerationById(1);\n *\n * if (!result.ok) {\n *  console.error(`Failed to fetch generation: ${result.error.message}`);\n * } else {\n *  console.log(`Fetched generation: ${result.data.name}`);\n * }\n * ```\n *\n * @see https://pokeapi.co/docs/v2#generation\n */\nexport async function getGenerationById(\n  id: number,\n): Promise<Result<Generation, PokeJsHttpError>> {\n  return _fetchGeneration(id);\n}\n\n/**\n * Fetches a paginated list of Pokémon generations from the API.\n *\n * @param paginationInput - An object containing pagination parameters.\n * @param paginationInput.limit - The number of items to fetch. Defaults to 20.\n * @param paginationInput.offset - The offset from the start of the list.\n * Defaults to 0.\n *\n * @returns A promise that resolves to a `PaginatedResult` containing a list of\n * `NamedAPIResourceList` or a `PokeSdkHttpError`.\n *\n * @example\n * ```typescript\n * const generations = await listGenerations({ limit: 10, offset: 0 });\n * if (generations.ok) {\n *   console.log(generations.data);\n * } else {\n *   console.error(generations.error);\n * }\n * ```\n *\n * @example\n * ### Pagination\n * ```ts\n * const result = await listGenerations({ limit: 10, offset: 0 });\n *\n * if (!result.ok) {\n *   console.error(`Failed to fetch generations: ${result.error.message}`);\n * } else {\n *   console.log(`Fetched ${result.data.results.length} generations`);\n *   if (result.next) {\n *     const nextResult = await result.next();\n *     if (!nextResult.ok) {\n *       console.error(`Failed to fetch next page of generations: ${nextResult.error.message}`);\n *     } else {\n *       console.log(`Fetched next ${nextResult.data.results.length} generations`);\n *     }\n *   }\n * }\n * ```\n *\n * @see https://pokeapi.co/docs/v2#generation\n * @see https://pokeapi.co/docs/v2#named\n */\nexport async function listGenerations(\n  paginationInput: PaginationInput = { limit: 20, offset: 0 },\n): Promise<\n  PaginatedResult<NamedAPIResourceList, PokeJsHttpError | PokeJsClientError>\n> {\n  const { limit, offset } = paginationInput;\n\n  if (limit < 1) {\n    return {\n      ok: false,\n      error: new PokeJsClientError(\"The limit must be at least 1\"),\n    };\n  }\n\n  if (offset < 0) {\n    return {\n      ok: false,\n      error: new PokeJsClientError(\"The offset must be at least 0\"),\n    };\n  }\n\n  const url = new URL(`${BASE_API_URL}/generation`);\n\n  if (limit) url.searchParams.append(\"limit\", limit.toString());\n  if (offset) url.searchParams.append(\"offset\", offset.toString());\n\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const data = await response.json();\n\n    return {\n      ok: true,\n      data,\n      next: data.next\n        ? () => listGenerations({ limit, offset: offset + limit })\n        : undefined,\n      previous: data.previous\n        ? () => listGenerations({ limit, offset: offset - limit })\n        : undefined,\n    };\n  }\n  return { ok: false, error: await PokeJsHttpError.fromResponse(response) };\n}\n","import * as pokemon from \"./endpoint-groups/pokemon/pokemon.js\";\nimport * as games from \"./endpoint-groups/games/generation.js\";\n\nexport * from \"./types/poke-api.js\";\n\nexport const PokeJS = {\n  pokemon,\n  games,\n};\n"]}